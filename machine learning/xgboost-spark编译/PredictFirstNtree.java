import java.util.HashMap;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;

/**
 * predict first ntree
 *
 * @author hzx
 */
public class PredictFirstNtree {
  public static void main(String[] args) throws XGBoostError {
    // load file from text file, also binary buffer generated by xgboost4j
    DMatrix trainMat = new DMatrix("agaricus.txt.train");
    DMatrix testMat = new DMatrix("agaricus.txt.test");

    //specify parameters
    HashMap<String, Object> params = new HashMap<String, Object>();

    params.put("eta", 1.0);
    params.put("max_depth", 2);
    params.put("silent", 1);
    params.put("objective", "binary:logistic");


    //specify watchList
    HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
    watches.put("train", trainMat);
    watches.put("test", testMat);


    //train a booster
    int round = 3;
    Booster booster = XGBoost.train(trainMat, params, round, watches, null, null);

    //predict use 1 tree
    float[][] predicts1 = booster.predict(testMat, false, 1);
    //by default all trees are used to do predict
    float[][] predicts2 = booster.predict(testMat);

    //use a simple evaluation class to check error result
  }
}
