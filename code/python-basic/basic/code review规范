1. 代码规范：很多公司都有 coding style guideline。大家的约定俗成，避免公司的代码风格不一致，也避免一些不不要的为了
“要不要把闭括号另起一行” 而无谓地争论，除非是不小心，通常大家都不会弄错。但是新员工往往会在这方面还不太熟悉。
这一类问题也比较容易指出。
2. 代码可读性：这包括一个函数不要太长，太长就 break down。所有的变量名尽量能够说明它的用意和类型。比如
hosting_address_hash，一看就知道是房东地址，而且是个 hash 类型。不要有嵌套太多层的条件语句或者循环语句。
不要有一个太长的 boolean 判断语句。如果一个函数，别人需要看你的长篇注释才能明白，那这个函数就一定有重构的空间。
另外，如果不可避免有一些注释，则一定要保证注释准确且与代码完全一致。
3. 有没有漏掉任何 corner case。很多时候这是业务逻辑相关的，尤其需要比较老的工程师帮助指出需要处理的所有情况。
4. 错误处理：这是最常见也是代码审核最容易帮别人看出的问题。举个例子，下面一段简单到不能再简单的代码就至少有三个潜在的问题：
params 里面需要 validate 是不是有 user_id 和 new_name 这两个 key；能不能找到这个 user_id 对应的 user；
save 的时候会不会有 DB level 的 exception，应该怎么处理。
5. 测试用例和防坑。测试例不用说了，每段代码都应该有测试例。但是对于一些你能预见如果别人改动代码会引起可能问题的情况，
一定要额外的加测试例防止这种事情的发生。这一点没有例子参考也不太好说。怎么写好测试例，本身就值得写一篇文章了。
6. 小架构。什么意思呢，就是一个文件或者类内部的代码组织。比如如果有重复的代码段，就应该提取出来公用。不要在代码里随意设常数，
所有的常数都应该文件顶部统一定义。哪些应该是 private，等等
7. 大架构。这个就更广了。包括文件组织，函数是不是应该抽象到 lib 或者 helper 文件里；是不是应该使用继承类；
是不是和整个代码库的风格一致，等等。